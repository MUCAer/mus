// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 2.4.13.
// **********************************************************************

#ifndef __USER_SERVANT_H_
#define __USER_SERVANT_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;
#include "utils.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace mus
{
    struct UserInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "mus.UserInfo";
        }
        static string MD5()
        {
            return "01960991d4367f1cfc0b18e669fc146c";
        }
        UserInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            uid = 0;
            imei = "";
            user_name = "";
            type = 0;
            status = 0;
            passwd = "";
            phone = "";
            email = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(uid, 0);
            _os.write(imei, 1);
            _os.write(user_name, 2);
            _os.write(type, 3);
            _os.write(status, 4);
            _os.write(passwd, 5);
            if (phone != "")
            {
                _os.write(phone, 6);
            }
            if (email != "")
            {
                _os.write(email, 7);
            }
            if (ext_info.size() > 0)
            {
                _os.write(ext_info, 8);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uid, 0, true);
            _is.read(imei, 1, true);
            _is.read(user_name, 2, true);
            _is.read(type, 3, true);
            _is.read(status, 4, true);
            _is.read(passwd, 5, true);
            _is.read(phone, 6, false);
            _is.read(email, 7, false);
            _is.read(ext_info, 8, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["uid"] = tars::JsonOutput::writeJson(uid);
            p->value["imei"] = tars::JsonOutput::writeJson(imei);
            p->value["user_name"] = tars::JsonOutput::writeJson(user_name);
            p->value["type"] = tars::JsonOutput::writeJson(type);
            p->value["status"] = tars::JsonOutput::writeJson(status);
            p->value["passwd"] = tars::JsonOutput::writeJson(passwd);
            p->value["phone"] = tars::JsonOutput::writeJson(phone);
            p->value["email"] = tars::JsonOutput::writeJson(email);
            p->value["ext_info"] = tars::JsonOutput::writeJson(ext_info);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(uid,pObj->value["uid"], true);
            tars::JsonInput::readJson(imei,pObj->value["imei"], true);
            tars::JsonInput::readJson(user_name,pObj->value["user_name"], true);
            tars::JsonInput::readJson(type,pObj->value["type"], true);
            tars::JsonInput::readJson(status,pObj->value["status"], true);
            tars::JsonInput::readJson(passwd,pObj->value["passwd"], true);
            tars::JsonInput::readJson(phone,pObj->value["phone"], false);
            tars::JsonInput::readJson(email,pObj->value["email"], false);
            tars::JsonInput::readJson(ext_info,pObj->value["ext_info"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(uid,"uid");
            _ds.display(imei,"imei");
            _ds.display(user_name,"user_name");
            _ds.display(type,"type");
            _ds.display(status,"status");
            _ds.display(passwd,"passwd");
            _ds.display(phone,"phone");
            _ds.display(email,"email");
            _ds.display(ext_info,"ext_info");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(uid, true);
            _ds.displaySimple(imei, true);
            _ds.displaySimple(user_name, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(passwd, true);
            _ds.displaySimple(phone, true);
            _ds.displaySimple(email, true);
            _ds.displaySimple(ext_info, false);
            return _os;
        }
    public:
        tars::Int64 uid;
        std::string imei;
        std::string user_name;
        tars::Int64 type;
        tars::Int64 status;
        std::string passwd;
        std::string phone;
        std::string email;
        map<std::string, std::string> ext_info;
    };
    inline bool operator==(const UserInfo&l, const UserInfo&r)
    {
        return l.uid == r.uid && l.imei == r.imei && l.user_name == r.user_name && l.type == r.type && l.status == r.status && l.passwd == r.passwd && l.phone == r.phone && l.email == r.email && l.ext_info == r.ext_info;
    }
    inline bool operator!=(const UserInfo&l, const UserInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const UserInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,UserInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct RetrieveUserListRequest : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "mus.RetrieveUserListRequest";
        }
        static string MD5()
        {
            return "2d7cc139d8a8170697034204553696f3";
        }
        RetrieveUserListRequest()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(trace_payload, 0);
            _os.write(uids, 1);
            if (ext_info.size() > 0)
            {
                _os.write(ext_info, 2);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(trace_payload, 0, true);
            _is.read(uids, 1, true);
            _is.read(ext_info, 2, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["trace_payload"] = tars::JsonOutput::writeJson(trace_payload);
            p->value["uids"] = tars::JsonOutput::writeJson(uids);
            p->value["ext_info"] = tars::JsonOutput::writeJson(ext_info);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(trace_payload,pObj->value["trace_payload"], true);
            tars::JsonInput::readJson(uids,pObj->value["uids"], true);
            tars::JsonInput::readJson(ext_info,pObj->value["ext_info"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(trace_payload,"trace_payload");
            _ds.display(uids,"uids");
            _ds.display(ext_info,"ext_info");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(trace_payload, true);
            _ds.displaySimple(uids, true);
            _ds.displaySimple(ext_info, false);
            return _os;
        }
    public:
        inf::TraceBlock trace_payload;
        vector<tars::Int64> uids;
        map<std::string, std::string> ext_info;
    };
    inline bool operator==(const RetrieveUserListRequest&l, const RetrieveUserListRequest&r)
    {
        return l.trace_payload == r.trace_payload && l.uids == r.uids && l.ext_info == r.ext_info;
    }
    inline bool operator!=(const RetrieveUserListRequest&l, const RetrieveUserListRequest&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const RetrieveUserListRequest&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,RetrieveUserListRequest&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct RegisterUserListRequest : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "mus.RegisterUserListRequest";
        }
        static string MD5()
        {
            return "24f8135d94d097d258ef992e642fa62c";
        }
        RegisterUserListRequest()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            user_name = "";
            phone = "";
            email = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(trace_payload, 0);
            _os.write(user_name, 1);
            if (phone != "")
            {
                _os.write(phone, 2);
            }
            if (email != "")
            {
                _os.write(email, 3);
            }
            if (ext_info.size() > 0)
            {
                _os.write(ext_info, 4);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(trace_payload, 0, true);
            _is.read(user_name, 1, true);
            _is.read(phone, 2, false);
            _is.read(email, 3, false);
            _is.read(ext_info, 4, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["trace_payload"] = tars::JsonOutput::writeJson(trace_payload);
            p->value["user_name"] = tars::JsonOutput::writeJson(user_name);
            p->value["phone"] = tars::JsonOutput::writeJson(phone);
            p->value["email"] = tars::JsonOutput::writeJson(email);
            p->value["ext_info"] = tars::JsonOutput::writeJson(ext_info);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(trace_payload,pObj->value["trace_payload"], true);
            tars::JsonInput::readJson(user_name,pObj->value["user_name"], true);
            tars::JsonInput::readJson(phone,pObj->value["phone"], false);
            tars::JsonInput::readJson(email,pObj->value["email"], false);
            tars::JsonInput::readJson(ext_info,pObj->value["ext_info"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(trace_payload,"trace_payload");
            _ds.display(user_name,"user_name");
            _ds.display(phone,"phone");
            _ds.display(email,"email");
            _ds.display(ext_info,"ext_info");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(trace_payload, true);
            _ds.displaySimple(user_name, true);
            _ds.displaySimple(phone, true);
            _ds.displaySimple(email, true);
            _ds.displaySimple(ext_info, false);
            return _os;
        }
    public:
        inf::TraceBlock trace_payload;
        std::string user_name;
        std::string phone;
        std::string email;
        map<std::string, std::string> ext_info;
    };
    inline bool operator==(const RegisterUserListRequest&l, const RegisterUserListRequest&r)
    {
        return l.trace_payload == r.trace_payload && l.user_name == r.user_name && l.phone == r.phone && l.email == r.email && l.ext_info == r.ext_info;
    }
    inline bool operator!=(const RegisterUserListRequest&l, const RegisterUserListRequest&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const RegisterUserListRequest&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,RegisterUserListRequest&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class UserServantPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~UserServantPrxCallback(){}
        virtual void callback_check_username(tars::Int32 ret)
        { throw std::runtime_error("callback_check_username() override incorrect."); }
        virtual void callback_check_username_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_check_username_exception() override incorrect."); }

        virtual void callback_register_user_list(tars::Int32 ret,  const map<tars::Int64, mus::UserInfo>& response)
        { throw std::runtime_error("callback_register_user_list() override incorrect."); }
        virtual void callback_register_user_list_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_register_user_list_exception() override incorrect."); }

        virtual void callback_retrieve_user_list(tars::Int32 ret,  const map<tars::Int64, mus::UserInfo>& response)
        { throw std::runtime_error("callback_retrieve_user_list() override incorrect."); }
        virtual void callback_retrieve_user_list_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_retrieve_user_list_exception() override incorrect."); }

        virtual void callback_test(tars::Int32 ret,  const map<std::string, std::string>& out_ext_param)
        { throw std::runtime_error("callback_test() override incorrect."); }
        virtual void callback_test_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_test_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __UserServant_all[]=
            {
                "check_username",
                "register_user_list",
                "retrieve_user_list",
                "test"
            };
            pair<string*, string*> r = equal_range(__UserServant_all, __UserServant_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __UserServant_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_check_username_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_check_username(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_register_user_list_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    map<tars::Int64, mus::UserInfo> response;
                    _is.read(response, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_register_user_list(_ret, response);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_retrieve_user_list_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    map<tars::Int64, mus::UserInfo> response;
                    _is.read(response, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_retrieve_user_list(_ret, response);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    map<std::string, std::string> out_ext_param;
                    _is.read(out_ext_param, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_test(_ret, out_ext_param);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<UserServantPrxCallback> UserServantPrxCallbackPtr;

    /* callback of coroutine async proxy for client */
    class UserServantCoroPrxCallback: public UserServantPrxCallback
    {
    public:
        virtual ~UserServantCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __UserServant_all[]=
            {
                "check_username",
                "register_user_list",
                "retrieve_user_list",
                "test"
            };

            pair<string*, string*> r = equal_range(__UserServant_all, __UserServant_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __UserServant_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_check_username_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_check_username(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_check_username_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_check_username_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_register_user_list_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        map<tars::Int64, mus::UserInfo> response;
                        _is.read(response, 2, true);
                        setResponseContext(msg->response->context);

                        callback_register_user_list(_ret, response);

                    }
                    catch(std::exception &ex)
                    {
                        callback_register_user_list_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_register_user_list_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_retrieve_user_list_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        map<tars::Int64, mus::UserInfo> response;
                        _is.read(response, 2, true);
                        setResponseContext(msg->response->context);

                        callback_retrieve_user_list(_ret, response);

                    }
                    catch(std::exception &ex)
                    {
                        callback_retrieve_user_list_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_retrieve_user_list_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        map<std::string, std::string> out_ext_param;
                        _is.read(out_ext_param, 3, true);
                        setResponseContext(msg->response->context);

                        callback_test(_ret, out_ext_param);

                    }
                    catch(std::exception &ex)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<UserServantCoroPrxCallback> UserServantCoroPrxCallbackPtr;

    /* proxy for client */
    class UserServantProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 check_username(const std::string & user_name,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(user_name, 1);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"check_username", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_check_username(UserServantPrxCallbackPtr callback,const std::string &user_name,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(user_name, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"check_username", _os, context, _mStatus, callback);
        }
        
        void coro_check_username(UserServantCoroPrxCallbackPtr callback,const std::string &user_name,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(user_name, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"check_username", _os, context, _mStatus, callback, true);
        }

        tars::Int32 register_user_list(const mus::RegisterUserListRequest & request,map<tars::Int64, mus::UserInfo> &response,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(request, 1);
            _os.write(response, 2);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"register_user_list", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(response, 2, true);
            return _ret;
        }

        void async_register_user_list(UserServantPrxCallbackPtr callback,const mus::RegisterUserListRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"register_user_list", _os, context, _mStatus, callback);
        }
        
        void coro_register_user_list(UserServantCoroPrxCallbackPtr callback,const mus::RegisterUserListRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"register_user_list", _os, context, _mStatus, callback, true);
        }

        tars::Int32 retrieve_user_list(const mus::RetrieveUserListRequest & request,map<tars::Int64, mus::UserInfo> &response,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(request, 1);
            _os.write(response, 2);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"retrieve_user_list", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(response, 2, true);
            return _ret;
        }

        void async_retrieve_user_list(UserServantPrxCallbackPtr callback,const mus::RetrieveUserListRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"retrieve_user_list", _os, context, _mStatus, callback);
        }
        
        void coro_retrieve_user_list(UserServantCoroPrxCallbackPtr callback,const mus::RetrieveUserListRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"retrieve_user_list", _os, context, _mStatus, callback, true);
        }

        tars::Int32 test(const std::string & input_info,const std::string & input_param,map<std::string, std::string> &out_ext_param,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(input_info, 1);
            _os.write(input_param, 2);
            _os.write(out_ext_param, 3);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"test", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(out_ext_param, 3, true);
            return _ret;
        }

        void async_test(UserServantPrxCallbackPtr callback,const std::string &input_info,const std::string &input_param,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(input_info, 1);
            _os.write(input_param, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os, context, _mStatus, callback);
        }
        
        void coro_test(UserServantCoroPrxCallbackPtr callback,const std::string &input_info,const std::string &input_param,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(input_info, 1);
            _os.write(input_param, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os, context, _mStatus, callback, true);
        }

        UserServantProxy* tars_hash(int64_t key)
        {
            return (UserServantProxy*)ServantProxy::tars_hash(key);
        }

        UserServantProxy* tars_consistent_hash(int64_t key)
        {
            return (UserServantProxy*)ServantProxy::tars_consistent_hash(key);
        }

        UserServantProxy* tars_set_timeout(int msecond)
        {
            return (UserServantProxy*)ServantProxy::tars_set_timeout(msecond);
        }

        static const char* tars_prxname() { return "UserServantProxy"; }
    };
    typedef tars::TC_AutoPtr<UserServantProxy> UserServantPrx;

    /* servant for server */
    class UserServant : public tars::Servant
    {
    public:
        virtual ~UserServant(){}
        virtual tars::Int32 check_username(const std::string & user_name,tars::TarsCurrentPtr current) = 0;
        static void async_response_check_username(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 register_user_list(const mus::RegisterUserListRequest & request,map<tars::Int64, mus::UserInfo> &response,tars::TarsCurrentPtr current) = 0;
        static void async_response_register_user_list(tars::TarsCurrentPtr current, tars::Int32 _ret, const map<tars::Int64, mus::UserInfo> &response)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("response", response);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["response"] = tars::JsonOutput::writeJson(response);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(response, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 retrieve_user_list(const mus::RetrieveUserListRequest & request,map<tars::Int64, mus::UserInfo> &response,tars::TarsCurrentPtr current) = 0;
        static void async_response_retrieve_user_list(tars::TarsCurrentPtr current, tars::Int32 _ret, const map<tars::Int64, mus::UserInfo> &response)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("response", response);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["response"] = tars::JsonOutput::writeJson(response);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(response, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 test(const std::string & input_info,const std::string & input_param,map<std::string, std::string> &out_ext_param,tars::TarsCurrentPtr current) = 0;
        static void async_response_test(tars::TarsCurrentPtr current, tars::Int32 _ret, const map<std::string, std::string> &out_ext_param)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("out_ext_param", out_ext_param);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["out_ext_param"] = tars::JsonOutput::writeJson(out_ext_param);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(out_ext_param, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __mus__UserServant_all[]=
            {
                "check_username",
                "register_user_list",
                "retrieve_user_list",
                "test"
            };

            pair<string*, string*> r = equal_range(__mus__UserServant_all, __mus__UserServant_all+4, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __mus__UserServant_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string user_name;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("user_name", user_name);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(user_name, _jsonPtr->value["user_name"], true);
                    }
                    else
                    {
                        _is.read(user_name, 1, true);
                    }
                    tars::Int32 _ret = check_username(user_name, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    mus::RegisterUserListRequest request;
                    map<tars::Int64, mus::UserInfo> response;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("request", request);
                        tarsAttr.getByDefault("response", response, response);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(request, _jsonPtr->value["request"], true);
                        tars::JsonInput::readJson(response, _jsonPtr->value["response"], false);
                    }
                    else
                    {
                        _is.read(request, 1, true);
                        _is.read(response, 2, false);
                    }
                    tars::Int32 _ret = register_user_list(request,response, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("response", response);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["response"] = tars::JsonOutput::writeJson(response);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(response, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    mus::RetrieveUserListRequest request;
                    map<tars::Int64, mus::UserInfo> response;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("request", request);
                        tarsAttr.getByDefault("response", response, response);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(request, _jsonPtr->value["request"], true);
                        tars::JsonInput::readJson(response, _jsonPtr->value["response"], false);
                    }
                    else
                    {
                        _is.read(request, 1, true);
                        _is.read(response, 2, false);
                    }
                    tars::Int32 _ret = retrieve_user_list(request,response, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("response", response);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["response"] = tars::JsonOutput::writeJson(response);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(response, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string input_info;
                    std::string input_param;
                    map<std::string, std::string> out_ext_param;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("input_info", input_info);
                        tarsAttr.get("input_param", input_param);
                        tarsAttr.getByDefault("out_ext_param", out_ext_param, out_ext_param);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(input_info, _jsonPtr->value["input_info"], true);
                        tars::JsonInput::readJson(input_param, _jsonPtr->value["input_param"], true);
                        tars::JsonInput::readJson(out_ext_param, _jsonPtr->value["out_ext_param"], false);
                    }
                    else
                    {
                        _is.read(input_info, 1, true);
                        _is.read(input_param, 2, true);
                        _is.read(out_ext_param, 3, false);
                    }
                    tars::Int32 _ret = test(input_info,input_param,out_ext_param, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("out_ext_param", out_ext_param);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["out_ext_param"] = tars::JsonOutput::writeJson(out_ext_param);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(out_ext_param, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
